CRITICAL SYNCHRONIZATION POINTS:

1. EATING PERMISSION (N-1 Strategy):
   - eating_permission_mutex protects philosophers_trying_to_eat counter
   - Prevents deadlock by limiting concurrent fork competition
   - Only N-1 philosophers can attempt to grab forks simultaneously

2. FORK ACQUISITION:
   - Each fork has its own mutex (forks[i])
   - Ordered acquisition prevents additional deadlock scenarios
   - Must check simulation_end between fork grabs

3. MEAL STATE UPDATES:
   - meal_mutex protects last_meal_time and meals_eaten
   - Critical for death detection accuracy
   - Prevents race conditions in death monitor

4. DEATH DETECTION:
   - death_mutex protects simulation_end flag
   - death_monitor checks every 1ms for <10ms death notification
   - Atomic simulation termination across all threads

5. LOGGING:
   - log_mutex ensures clean, non-overlapping output
   - All state changes are timestamped and logged atomically

THREAD INTERACTIONS:
- N philosopher threads compete for eating permission and forks
- 1 death monitor thread continuously checks for termination conditions
- Main thread coordinates startup, waits for completion, and cleans up
- All threads share the t_data structure with proper mutex protection

This architecture prevents deadlock while ensuring fair resource allocation
and precise timing compliance with the project requirements.